---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Link from '@/components/Link.astro'
import PageHead from '@/components/PageHead.astro'
import PostNavigation from '@/components/PostNavigation.astro'
import TableOfContents from '@/components/TableOfContents.astro'
import { badgeVariants } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Separator } from '@/components/ui/separator'
import Layout from '@/layouts/Layout.astro'
import { getAllProjects, getPostsByProject, parseAuthors } from '@/lib/data-utils'
import { formatDate } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { render } from 'astro:content'

export async function getStaticPaths() {
  const projects = await getAllProjects()
  return projects.map((project) => ({
    params: { id: project.id },
    props: project,
  }))
}

const project = Astro.props
const currentProjectId = Astro.params.id
const { Content, headings } = await render(project)
const relatedPosts = await getPostsByProject(currentProjectId)
const firstRelatedPost = relatedPosts.length > 0 ? relatedPosts[0] : null
const lastRelatedPost = relatedPosts.length > 0 ? relatedPosts[relatedPosts.length - 1] : null
---

<Layout isWide>
  <PageHead slot="head" title={project.data.name} description={project.data.description} />

  <section class="grid grid-cols-[minmax(0px,1fr)_min(768px,100%)_minmax(0px,1fr)] lg:grid-cols-[minmax(240px,1fr)_min(768px,calc(100%-480px))_minmax(240px,1fr)] gap-y-6 *:px-4">
    <Breadcrumbs
      items={[{ href: '/projects', label: 'Proyectos', icon: 'lucide:briefcase' }, { label: project.data.name, icon: 'lucide:folder' }]}
      class="col-start-2 mx-auto w-full"
    />

    {project.data.image && (
      <div class="col-start-2 mx-auto w-full max-w-[1000px]">
        <Image
          src={project.data.image}
          alt={project.data.name}
          width={1200}
          height={630}
          class="rounded-xl object-cover"
        />
      </div>
    )}

    <section class="col-start-2 flex flex-col gap-y-6 text-center">
      <h1 class="text-pretty text-3xl font-bold tracking-tight sm:text-4xl">
        {project.data.name}
      </h1>

      <div class="flex flex-wrap items-center justify-center gap-2 text-sm text-muted-foreground">
        {project.data.startDate && (
          <span class="flex items-center gap-x-1.5">
            <Icon name="lucide:calendar" class="size-4" />
            <span>
              {formatDate(project.data.startDate)}
              {project.data.endDate
                ? ` → ${formatDate(project.data.endDate)}`
                : ' → Present'}
            </span>
          </span>
        )}
      </div>

      <div class="flex flex-wrap justify-center gap-2">
        {project.data.tags?.map((tag) => (
          <span class={badgeVariants({ variant: 'secondary' })}>
            <Icon name="lucide:hash" class="size-3 -translate-x-0.5" />
            {tag}
          </span>
        ))}
      </div>

      {/* Enlaces externos - Solo mostrar aquí si no hay posts relacionados */}
      {project.data.link && relatedPosts.length === 0 && (
        <div class="flex justify-center">
          <Link href={project.data.link} external underline>
            <span class="flex items-center gap-1">
              <Icon name="lucide:external-link" class="size-4" />
              Visitar Proyecto
            </span>
          </Link>
        </div>
      )}

      {headings.length > 0 && (
        <div class="block w-full lg:hidden">
          <TableOfContents headings={headings} enableScrollSpy />
        </div>
      )}
    </section>

    {headings.length > 0 && (
      <aside class="sticky top-[6.5rem] hidden lg:block col-start-1 self-start pr-2">
        <div class="flex justify-end w-full">
          <TableOfContents headings={headings} enableScrollSpy />
        </div>
      </aside>
    )}

    <article class="prose col-start-2 max-w-none prose-invert">
      <Content />

      {/* Si no hay posts relacionados, mostrar un mensaje */}
      {relatedPosts.length === 0 && (
        <div class="mt-8 p-4 border rounded-lg bg-muted/30 text-center">
          <h3 class="text-lg font-medium mb-2">No hay posts asociados a este proyecto todavía</h3>
          <p class="text-muted-foreground">Este proyecto aún no tiene posts relacionados.</p>
        </div>
      )}

      {/* Enlaces externos */}
      {project.data.link && relatedPosts.length > 0 && (
        <div class="mt-8">
          <div class="p-4 border rounded-lg">
            <Link 
              href={project.data.link} 
              external 
              class="flex items-center justify-center gap-2 w-full px-6 py-3 bg-primary text-primary-foreground rounded-lg hover:opacity-90 transition-opacity"
            >
              <Icon name="lucide:external-link" class="size-5 text-background" />
              <span class="font-medium text-background">Visitar Proyecto</span>
            </Link>
          </div>
        </div>
      )}

      {/* Mobile version: Lista de posts relacionados - Índice de la serie */}
      {relatedPosts.length > 0 && (
        <div class="mt-8 block lg:hidden">
          <div class="p-4 border rounded-lg">
            {firstRelatedPost && (
              <Link 
                href={`/projects/${currentProjectId}/posts/${firstRelatedPost.id.split('/').pop()}`}
                class="flex items-center justify-center gap-2 w-full px-6 py-3 bg-primary/90 text-primary-foreground rounded-lg hover:bg-primary transition-colors mb-4"
              >
                <Icon name="lucide:book-open" class="size-5 text-background" />
                <span class="font-medium text-background">Comenzar la serie</span>
              </Link>
            )}
            
            <h2 class="text-2xl font-semibold my-4 text-center">Índice de esta serie</h2>
            <div class="flex flex-col gap-4">
              {relatedPosts.map((post, index) => (
                <Link 
                  href={`/projects/${currentProjectId}/posts/${post.id.split('/').pop()}`} 
                  class="block p-4 border rounded-lg hover:bg-secondary/50 transition-colors"
                >
                  <div class="flex gap-4 items-center">
                    <div class="bg-muted text-foreground w-10 h-10 flex-shrink-0 rounded-full flex items-center justify-center font-bold">
                      {index + 1}
                    </div>
                    <div class="flex flex-col">
                      <h3 class="text-lg font-medium mb-1">{post.data.title}</h3>
                      <p class="text-muted-foreground text-sm mb-1">{post.data.description}</p>
                      <span class="text-xs text-muted-foreground">{formatDate(post.data.date)}</span>
                    </div>
                  </div>
                </Link>
              ))}
            </div>
          </div>
        </div>
      )}
    </article>
    
    {/* Desktop series sidebar */}
    {relatedPosts.length > 0 && (
      <aside class="sticky top-[6.5rem] hidden lg:block col-start-3 self-start pl-2">
        <div class="flex flex-col gap-4 border rounded-lg p-4 w-full max-w-[260px] ml-5">
          
          <h3 class="font-semibold text-base">Índice de esta serie:</h3>
          <div class="flex flex-col gap-2 max-h-[calc(100vh-14rem)] overflow-y-auto pr-2">
            {relatedPosts.map((post, index) => (
              <Link 
                href={`/projects/${currentProjectId}/posts/${post.id.split('/').pop()}`} 
                class="flex items-center gap-2 p-2 rounded-lg hover:bg-secondary/50 transition-colors"
              >
                <div class="flex-shrink-0 w-6 h-6 rounded-full bg-muted text-muted-foreground flex items-center justify-center text-xs">
                  {index + 1}
                </div>
                <div class="flex flex-col">
                  <span class="text-xs">{post.data.title}</span>
                  <span class="text-xs text-muted-foreground">{formatDate(post.data.date)}</span>
                </div>
              </Link>
            ))}
          </div>
        </div>
      </aside>
    )}
  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed bottom-8 right-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>

  <script>
    document.addEventListener('astro:page-load', () => {
      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }
    })
  </script>
</Layout>
