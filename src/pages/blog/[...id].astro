---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Link from '@/components/Link.astro'
import PostHead from '@/components/PostHead.astro'
import ProjectLink from '@/components/ProjectLink.astro'
import PostNavigation from '@/components/PostNavigation.astro'
import TableOfContents from '@/components/TableOfContents.astro'
import { badgeVariants } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Separator } from '@/components/ui/separator'
import Layout from '@/layouts/Layout.astro'
import { getAdjacentPosts, getAllPosts, parseAuthors, getProjectForPost } from '@/lib/data-utils'
import { formatDate, readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { render } from 'astro:content'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }))
}

const post = Astro.props
const currentPostId = Astro.params.id
const { Content, headings } = await render(post)

// Verificar si este post pertenece a algún proyecto (para mostrar enlace)
const { project: associatedProject } = await getProjectForPost(currentPostId)

// Navegación normal cronológica entre todos los posts del blog
const { next: nextPost, prev: prevPost } = await getAdjacentPosts(currentPostId)

const authors = await parseAuthors(post.data.authors ?? [])
const readTimeText = readingTime(post.body!)
---

<Layout isWide>
  <PostHead slot="head" post={post} />

  <section class="grid grid-cols-[minmax(0px,1fr)_min(768px,100%)_minmax(0px,1fr)] gap-y-6 *:px-4">
    <Breadcrumbs
      items={[
        { href: '/blog', label: 'Blog', icon: 'lucide:archive' },
        { label: post.data.title, icon: 'lucide:file-text' }
      ]}
      class="col-start-2!"
    />

    {post.data.image && (
      <div class="col-span-full mx-auto w-full max-w-[1000px]">
        <Image
          src={post.data.image}
          alt={post.data.title}
          width={1200}
          height={630}
          class="rounded-xl object-cover"
        />
      </div>
    )}

    <section class="col-start-2 flex flex-col gap-y-6 text-center">
      <h1 class="text-pretty text-3xl font-bold tracking-tight leading-relaxed sm:text-4xl sm:leading-relaxed">
        {post.data.title}
      </h1>

      <div class="flex flex-wrap items-center justify-center gap-x-3 gap-y-3 text-sm text-muted-foreground">
        {authors.length > 0 && (
          <>
            <div class="flex items-center gap-x-2">
              {authors.map((author) => (
                <div class="flex items-center gap-x-1.5">
                  <Image
                    src={author.avatar}
                    alt={author.name}
                    width={32}
                    height={32}
                    class="rounded-full"
                  />
                  {author.isRegistered ? (
                    <Link href={`/authors/${author.id}`} underline class="text-foreground">
                      <span>{author.name}</span>
                    </Link>
                  ) : (
                    <span>{author.name}</span>
                  )}
                </div>
              ))}
            </div>
            <Separator orientation="vertical" className="hidden h-4 sm:block" />
            <Separator className="block w-full my-2 sm:hidden" />
          </>
        )}
        <span>{formatDate(post.data.date)}</span>
        <Separator orientation="vertical" className="hidden h-4 sm:block" />
        <Separator className="block w-full my-2 sm:hidden" />
        <span>{readTimeText}</span>
        
        {/* Enlace al proyecto si este post pertenece a uno */}
        {associatedProject && (
          <>
            <Separator orientation="vertical" className="hidden h-4 sm:block" />
            <Separator className="block w-full my-2 sm:hidden" />
            <div class="flex items-center gap-x-1.5 text-foreground">
              <span>Parte de:</span>
              <ProjectLink project={associatedProject} className="text-foreground" />
            </div>
          </>
        )}
      </div>

      <div class="flex flex-wrap justify-center gap-2 mt-2">
        {post.data.tags?.length > 0 ? (
          post.data.tags.map((tag) => (
            <a href={`/tags/${tag}`} class={badgeVariants({ variant: 'secondary' })}>
              <Icon name="lucide:hash" class="size-3 -translate-x-0.5" />
              {tag}
            </a>
          ))
        ) : (
          <span class="text-sm text-muted-foreground">No tags available</span>
        )}
      </div>

      {headings.length > 0 && (
        <div class="block w-full lg:hidden">
          <TableOfContents headings={headings} enableScrollSpy />
        </div>
      )}
    </section>

    {headings.length > 0 && (
      <aside class="sticky top-[6.5rem] hidden lg:block col-start-1 self-start pr-2">
        <TableOfContents headings={headings} enableScrollSpy />
      </aside>
    )}

    <article class="prose col-start-2 max-w-none prose-invert">
      <Content />
      <div class="not-prose prose-a:no-underline mt-12">
        <PostNavigation prevPost={prevPost} nextPost={nextPost} />
      </div>
    </article>
  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed bottom-8 right-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>

  <script>
    document.addEventListener('astro:page-load', () => {
      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }
    })
  </script>
</Layout>
