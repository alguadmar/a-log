---
import '@/styles/global.css'

import Footer from '@/components/Footer.astro'
import Head from '@/components/Head.astro'
import Header from '@/components/Header.astro'
import { SITE } from '@/consts'
import { cn } from '@/lib/utils'
import { initFastNavigation } from '@/head.js'

const { isWide = false } = Astro.props
---

<!doctype html>
<html lang={SITE.locale} class="color-scheme-unset">
  <Head>
    <!-- Preload crítico y preconectar con dominios -->
    <link rel="preload" href="/fonts/JetBrainsMono[wght].woff2" as="font" type="font/woff2" crossorigin>
    <link rel="preconnect" href="https://a-log-production.up.railway.app" crossorigin>
    
    <slot name="head" />
  </Head>
  <body>
    <div class="flex h-fit min-h-screen flex-col gap-y-6 font-sans">
      <Header />
      <main class="grow">
        <div
          class={cn(
            'mx-auto flex grow flex-col gap-y-6 px-4',
            !isWide && 'max-w-3xl',
          )}
        >
          <slot />
        </div>
      </main>
      <Footer />
    </div>

    <!-- Preload resources and connect to likely domains -->
    <link rel="preconnect" href="https://a-log-production.up.railway.app">
    <script is:inline>
      // Este script ayuda a acelerar la navegación preparando los enlaces y la navegación
      document.addEventListener('DOMContentLoaded', () => {
        // Caché para evitar prefetch repetido de enlaces
        const prefetchedLinks = new Set();
        
        // Función para detectar enlaces marcados para prefetch
        const prefetchLinks = (e) => {
          // Solo prefetch enlaces con atributo data-prefetch
          if (e.target.tagName === 'A' && 
              e.target.hasAttribute('data-prefetch') && 
              e.target.href &&
              e.target.href.startsWith(window.location.origin) &&
              !prefetchedLinks.has(e.target.href)) {
                
            // Evitar prefetch en conexiones lentas o modo ahorro de datos
            if (navigator.connection && 
                (navigator.connection.saveData || 
                 (navigator.connection.effectiveType && 
                  navigator.connection.effectiveType.includes('2g')))) {
              return;
            }
            
            // Añadir a caché para evitar repeticiones
            prefetchedLinks.add(e.target.href);
            
            // Realizar el prefetch
            fetch(e.target.href, { 
              method: 'GET', 
              credentials: 'same-origin',
              priority: 'low'
            });
          }
        };
        
        // Interceptar clics en enlaces para actualizar URL inmediatamente
        document.addEventListener('click', (e) => {
          // No interceptar clics con modificadores o enlaces especiales
          if (e.target.tagName === 'A' && 
              !e.target.closest('[data-no-instant]') &&
              !e.target.getAttribute('target') &&
              e.target.href && 
              e.target.href.startsWith(window.location.origin) &&
              !e.target.href.startsWith(window.location.origin + '#') &&
              !e.ctrlKey && !e.metaKey && !e.shiftKey) {
            
            // Prevenir comportamiento por defecto
            e.preventDefault();
            
            // Actualizar la URL inmediatamente para feedback visual
            window.history.pushState({}, '', e.target.href);
            
            // Iniciar la navegación real
            fetch(e.target.href, {priority: 'high'})
              .then(() => { window.location.href = e.target.href; })
              .catch(() => { window.location.href = e.target.href; });
          }
        });
        
        // Escuchar eventos con captura pasiva para mejor rendimiento
        document.addEventListener('mouseover', prefetchLinks, { passive: true });
      });
    </script>
  </body>
</html>