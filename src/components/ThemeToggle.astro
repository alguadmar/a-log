---
import { Button } from '@/components/ui/button'
import { Icon } from 'astro-icon/components'
---

<Button id="theme-toggle" variant="outline" size="icon" title="Cambiar tema">
  <Icon
    name="lucide:sun"
    class="size-4 scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90 theme-icon"
  />
  <Icon
    name="lucide:moon"
    class="absolute size-4 scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0 theme-icon"
  />
  <span class="sr-only">Cambiar tema</span>
</Button>

<style>
  /* Additional styles to prevent icon flash */
  :global(.dark) .theme-icon[data-icon="lucide:sun"] {
    transform: scale(0) rotate(-90deg);
  }
  
  :global(.dark) .theme-icon[data-icon="lucide:moon"] {
    transform: scale(1) rotate(0);
  }
</style>

<script is:inline data-astro-rerun>
  // Now we can optimize this script since the initial theme is 
  // already set in the <head> preload script
  // Using IIFE to avoid global variables
  (function() {
    const currentTheme = (() => {
      const localStorageTheme = localStorage?.getItem('theme') ?? ''
      if (['dark', 'light'].includes(localStorageTheme)) {
        return localStorageTheme
      }
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'dark'
      }
      return 'light'
    })()

    // Store the theme in localStorage for persistence
    window.localStorage.setItem('theme', currentTheme)
  })();
</script>

<script>
  // Removed debounce - we want immediate response

  function handleToggleClick() {
    const element = document.documentElement
    
    // Bloquear cualquier transición mientras actualizamos el tema
    element.classList.add('disable-transitions');
    
    // Simplificamos el toggle para hacerlo más directo y rápido
    const newTheme = element.classList.contains('dark') ? 'light' : 'dark';
    
    // Actualizar el localStorage antes para que esté listo cuando se necesite
    localStorage.setItem('theme', newTheme);
    
    // Aplicar colores y clases directamente sin transiciones
    if (newTheme === 'dark') {
      element.classList.add('dark');
      
      // Evitamos manipular DOM innecesariamente verificando si el estilo ya existe
      if (!document.getElementById('theme-icons-fix')) {
        // Crear el elemento de estilo una sola vez y guardarlo para reutilizar
        const styleEl = document.createElement('style');
        styleEl.id = 'theme-icons-fix';
        styleEl.textContent = `
          /* Estilos inmediatos para dark mode */
          :root.dark [data-icon="lucide:sun"] { opacity: 0 !important; transform: scale(0) rotate(-90deg) !important; }
          :root.dark [data-icon="lucide:moon"] { opacity: 1 !important; transform: scale(1) rotate(0) !important; }
          :root.dark .dark\\:hidden { display: none !important; }
          :root.dark .hidden.dark\\:block { display: block !important; }
          :root.dark img[class*="dark:hidden"] { display: none !important; }
          :root.dark img[class*="hidden"][class*="dark:block"] { display: block !important; }
        `;
        document.head.appendChild(styleEl);
      }
    } else {
      element.classList.remove('dark');
      // Eliminar estilos de dark mode
      const iconFix = document.getElementById('theme-icons-fix');
      if (iconFix) iconFix.remove();
    }
    
    // Después de un mínimo timeout, permitir transiciones otra vez
    requestAnimationFrame(() => {
      element.classList.remove('disable-transitions');
    });
  }

  // Usamos el handler directo sin debounce para mejorar la respuesta
  function initThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle')
    if (themeToggle) {
      themeToggle.addEventListener('click', handleToggleClick)
    }
  }

  // Initialize on page load
  initThemeToggle()

  // Handle view transitions - optimizado para evitar trabajo DOM redundante
  document.addEventListener('astro:after-swap', () => {
    // Función optimizada para evitar recrear elementos innecesariamente
    const storedTheme = localStorage.getItem('theme')
    const element = document.documentElement
    
    // Aplicar el tema directamente sin transiciones
    if (storedTheme === 'dark') {
      element.classList.add('dark')
      
      // Evitar crear el elemento si ya existe
      if (!document.getElementById('theme-icons-fix')) {
        // Usar createElement para mejor rendimiento que insertAdjacentHTML
        const styleEl = document.createElement('style');
        styleEl.id = 'theme-icons-fix';
        // Texto precompilado para evitar concatenaciones
        styleEl.textContent = 
          ':root.dark [data-icon="lucide:sun"]{opacity:0!important;transform:scale(0) rotate(-90deg)!important}' +
          ':root.dark [data-icon="lucide:moon"]{opacity:1!important;transform:scale(1) rotate(0)!important}' +
          ':root.dark .dark\\:hidden{display:none!important}' +
          ':root.dark .hidden.dark\\:block{display:block!important}' +
          ':root.dark img[class*="dark:hidden"]{display:none!important}' +
          ':root.dark img[class*="hidden"][class*="dark:block"]{display:block!important}';
        
        document.head.appendChild(styleEl);
      }
    } else {
      element.classList.remove('dark')
      const iconFix = document.getElementById('theme-icons-fix');
      if (iconFix) iconFix.remove();
    }

    // Reinicializar el botón de tema
    initThemeToggle()
  })
</script>
