---
import { ScrollArea } from '@/components/ui/scroll-area'
import { Icon } from 'astro-icon/components'
import TableOfContentsHeading from './TableOfContentsHeading.astro'

export interface Heading {
  depth: number
  slug: string
  text: string
  subheadings: Heading[]
}

const { headings } = Astro.props
const toc = buildToc(headings)

function buildToc(headings: Heading[]): Heading[] {
  const toc: Heading[] = []
  const stack: Heading[] = []

  headings.forEach((h) => {
    const heading = { ...h, subheadings: [] }

    while (stack.length > 0 && stack[stack.length - 1].depth >= heading.depth) {
      stack.pop()
    }

    if (stack.length === 0) {
      toc.push(heading)
    } else {
      stack[stack.length - 1].subheadings.push(heading)
    }

    stack.push(heading)
  })

  return toc
}
---

<!-- Versión móvil como desplegable -->
<details
  open
  class="group col-start-2 block rounded-xl border p-4 xl:hidden"
>
  <summary
    class="flex cursor-pointer items-center justify-between text-xl font-semibold group-open:pb-4"
  >
    Tabla de Contenidos
    <Icon
      name="lucide:chevron-down"
      class="size-5 transition-transform group-open:rotate-180"
    />
  </summary>
  <ScrollArea
    client:load
    className="flex max-h-64 flex-col overflow-y-auto text-left"
    type="always"
  >
    <nav>
      <ul id="mobile-toc-container" class="text-left">
        {toc.map((heading) => <TableOfContentsHeading heading={heading} />)}
      </ul>
    </nav>
  </ScrollArea>
</details>

<!-- Versión desktop como barra lateral -->
<nav
  class="sticky top-[5.5rem] col-start-1 hidden h-[calc(100vh-5.5rem)] text-xs leading-4 xl:block"
>
  <div class="flex justify-end">
    <ScrollArea client:load className="max-h-[calc(100vh-8rem)]" type="always">
      <ul
        class="flex flex-col justify-end gap-y-2 overflow-y-auto px-8"
        id="toc-container"
      >
        <li>
          <h2 class="mb-2 text-lg font-semibold">Tabla de Contenidos</h2>
        </li>
        {toc.map((heading) => <TableOfContentsHeading heading={heading} />)}
      </ul>
    </ScrollArea>
  </div>
</nav>

<style>
  /* Estilo para enlaces activos e inactivos */
  :global(.toc-link) {
    opacity: 0.6;
    transition: opacity 0.2s ease;
  }
  
  :global(.toc-link.active) {
    opacity: 1;
    font-weight: 500;
  }
  
  :global(.toc-link:hover) {
    opacity: 0.9;
  }
</style>

<script>
  function setupToc() {
    // Altura del header para cálculos de offset
    const header = document.querySelector('header')
    const headerHeight = header ? header.offsetHeight : 0
    
    // Obtener todos los encabezados en el artículo
    const headings = Array.from(document.querySelectorAll('.prose h2, .prose h3, .prose h4, .prose h5, .prose h6'))
    
    // Obtener todos los enlaces en el TOC (desktop y móvil)
    const tocLinks = document.querySelectorAll('#toc-container li a[href^="#"], #mobile-toc-container li a[href^="#"]')
    
    // Variable para controlar temporalmente la actualización del IntersectionObserver
    let isManualNavigation = false;
    let manualNavigationTimeout = null;
    
    // Añadir manejador de clics para scroll suave
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault()
        const targetId = link.getAttribute('href').substring(1)
        const targetElement = document.getElementById(targetId)
        
        if (targetElement) {
          // Indicar que estamos en navegación manual
          isManualNavigation = true;
          clearTimeout(manualNavigationTimeout);
          
          // Actualizar la clase activa inmediatamente
          updateActiveLink(targetId)
          
          // Actualizar estado de encabezados visibles
          currentlyVisibleHeadings = [targetId];
          
          // Scroll al destino con offset para header
          const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY - headerHeight - 20
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          })
          
          // Actualizar URL hash sin scroll
          history.pushState(null, null, '#' + targetId)
          
          // Después de un tiempo, volver a dejar que el IntersectionObserver actualice
          manualNavigationTimeout = setTimeout(() => {
            isManualNavigation = false;
          }, 1000); // Esperar 1 segundo después del clic
        }
      })
    })
    
    // Array para mantener el estado actual de los encabezados visibles
    let currentlyVisibleHeadings = []
    
    // Configurar IntersectionObserver para detectar los encabezados visibles
    const observer = new IntersectionObserver(
      (entries) => {
        // Si estamos en modo de navegación manual, no actualizar mediante IntersectionObserver
        if (isManualNavigation) return;
      
        // Procesar las entradas para actualizar cuáles están visibles
        entries.forEach(entry => {
          const headingId = entry.target.id
          
          if (entry.isIntersecting) {
            // Añadir a la lista de visibles si no está ya
            if (!currentlyVisibleHeadings.includes(headingId)) {
              currentlyVisibleHeadings.push(headingId)
            }
          } else {
            // Quitar de la lista de visibles
            currentlyVisibleHeadings = currentlyVisibleHeadings.filter(id => id !== headingId)
          }
        })
        
        // Aplicar los cambios visualmente
        if (currentlyVisibleHeadings.length > 0) {
          // Primera, eliminar todas las marcas activas
          tocLinks.forEach(link => {
            link.classList.remove('active')
          })
          
          // Luego, resaltar todos los encabezados actualmente visibles
          currentlyVisibleHeadings.forEach(id => {
            highlightLink(id)
          })
        } else if (entries.length > 0) {
          // Si no hay encabezados visibles, encontrar el más cercano al viewport
          let nearestHeading = null
          let minDistance = Infinity
          
          entries.forEach(entry => {
            const distance = Math.abs(entry.boundingClientRect.top)
            if (distance < minDistance) {
              minDistance = distance
              nearestHeading = entry.target
            }
          })
          
          if (nearestHeading && nearestHeading.id) {
            updateActiveLink(nearestHeading.id)
          }
        }
      },
      {
        rootMargin: `-${headerHeight + 20}px 0px -20% 0px`,
        threshold: [0, 0.1, 0.5]
      }
    )
    
    // Observar todos los encabezados
    headings.forEach(heading => {
      if (heading.id) {
        observer.observe(heading)
      }
    })
    
    // Función para resaltar un enlace específico sin quitar los demás resaltados
    function highlightLink(id) {
      const selector = `#toc-container li a[href="#${id}"], #mobile-toc-container li a[href="#${id}"]`
      const links = document.querySelectorAll(selector)
      links.forEach(link => {
        link.classList.add('active')
      })
    }
    
    // Función para actualizar el enlace activo (usado en clics)
    function updateActiveLink(activeId) {
      // Eliminar clase activa de todos los enlaces
      tocLinks.forEach(link => {
        link.classList.remove('active')
      })
      
      // Añadir clase activa al enlace correspondiente
      const activeLinks = document.querySelectorAll(`#toc-container li a[href="#${activeId}"], #mobile-toc-container li a[href="#${activeId}"]`)
      activeLinks.forEach(link => {
        link.classList.add('active')
      })
    }
    
    // Verificar si hay un hash en la URL
    if (window.location.hash) {
      const id = window.location.hash.substring(1)
      updateActiveLink(id)
    } else if (headings.length > 0 && headings[0].id) {
      // Si no hay hash, resaltar el primer encabezado por defecto
      updateActiveLink(headings[0].id)
    }
  }

  // Configurar al cargar la página y después de transiciones
  document.addEventListener('astro:page-load', setupToc)
  document.addEventListener('astro:after-swap', setupToc)
  
  // Optionally disable view transitions on slow connections
  if (navigator.connection && 
      (navigator.connection.saveData || 
      (navigator.connection.effectiveType && navigator.connection.effectiveType.includes('2g')))) {
    document.documentElement.style.setProperty('--animation-duration', '0s');
  }
</script>