---
import AvatarComponent from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { parseAuthors } from '@/lib/data-utils'
import { formatDate, readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import Link from './Link.astro'
import { fileURLToPath } from 'node:url'
import path from 'node:path'

interface Props {
  entry: CollectionEntry<'blog'>
}

const { entry } = Astro.props
const formattedDate = formatDate(entry.data.date)
const readTime = readingTime(entry.body!)
const authors = await parseAuthors(entry.data.authors ?? [])

// Process image path if it's a relative path
let imageData = entry.data.image
if (imageData && typeof imageData === 'string' && imageData.startsWith('./')) {
  const contentDir = entry.id.split('/').slice(0, -1).join('/')
  const contentBasePath = path.join(process.cwd(), 'src/content/blog', contentDir)
  
  try {
    // Import image directly using absolute path in site URL format
    imageData = Astro.site 
      ? new URL(`/src/content/blog/${contentDir}/${imageData.replace('./', '')}`, Astro.site)
      : imageData
  } catch (error) {
    console.error(`Error processing image for entry ${entry.id}:`, error)
  }
}
---

<div
  class="hover:bg-secondary/50 rounded-xl border p-4 transition-all"
>
  <div
    class="flex flex-col gap-4 sm:flex-row"
  >
    {
      entry.data.image && (
      <Link href={`/${entry.collection}/${entry.id}`}>
        <div class="relative h-48 w-full overflow-hidden rounded-md bg-muted sm:h-36 sm:w-[250px] sm:shrink-0">
          <Image
            src={imageData || entry.data.image}
            alt={entry.data.title}
            width={250}
            height={150}
            class="absolute inset-0 h-full w-full object-cover transition-transform hover:scale-105"
            loading="lazy"
          />
        </div>
      </Link>
      )
    }

    <div class="grow w-full mt-1 sm:mt-0">
      <Link href={`/${entry.collection}/${entry.id}`}>
        <h3 class="mb-2 text-lg font-medium hover:text-primary transition-colors">{entry.data.title}</h3>
      </Link>
      <p class="text-muted-foreground mb-3 text-sm">{entry.data.description}</p>

      <div
        class="text-muted-foreground mb-2 flex flex-wrap items-center gap-x-1 gap-y-1.5 text-[0.65rem] xs:gap-x-2 xs:text-xs sm:text-xs"
      >
        {
          authors.length > 0 && (
            <>
              {authors.map((author) => (
                <div class="flex items-center gap-x-1">
                  <AvatarComponent
                    client:load
                    src={author.avatar}
                    alt={author.name}
                    fallback={author.name[0]}
                    className="size-4 xs:size-5 sm:size-5 rounded-full"
                  />
                  <span class="truncate max-w-[80px] xs:max-w-[120px] sm:max-w-none">{author.name}</span>
                </div>
              ))}
              <Separator orientation="vertical" className="h-3 xs:h-4 sm:h-4!" />
            </>
          )
        }
        <span class="whitespace-nowrap">{formattedDate}</span>
        <Separator orientation="vertical" className="h-3 xs:h-4 sm:h-4!" />
        <span class="whitespace-nowrap">{readTime}</span>
      </div>

      {
        entry.data.tags && (
          <div class="flex flex-wrap gap-2">
            {entry.data.tags.map((tag) => (
              <Link href={`/tags/${tag}`} class="hover:opacity-80 transition-opacity">
                <Badge variant="secondary" className="flex items-center gap-x-1 text-[0.65rem] xs:text-xs">
                  <Icon name="lucide:hash" class="size-2.5 xs:size-3 mr-0" />
                  <span class="truncate max-w-[60px] xs:max-w-none">{tag}</span>
                </Badge>
              </Link>
            ))}
          </div>
        )
      }
    </div>
  </div>
</div>
